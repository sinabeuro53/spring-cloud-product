buildscript {
    ext {
        springBootVersion = '2.5.6'
    }
    repositories {
        //mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2"}
        //maven { url "${mavenUrl}" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE')
        classpath("com.moowork.gradle:gradle-node-plugin:1.2.0")

    }
}


plugins {
    id 'org.springframework.boot' version '2.5.6'
//    id "ua.eshepelyuk.ManifestClasspath" version "1.0.0"
    id "com.moowork.node" version "1.3.1"
}

apply plugin: "java"
apply plugin: "application"
// apply plugin: "maven"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: 'com.moowork.node'



bootJar {
    enabled = true
}

jar {
    enabled = true
}


//springBoot {
//    buildInfo()
////    mainClass.set("com.example.springcloudproduct.BackendApplicationApplication")
//}


//group = "tricycle.service.pig"
//description = project.name
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
//    jcenter()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-parent:2.5.6'
    //implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

//    implementation 'com.moowork.gradle:gradle-node-plugin:1.3.1'
}

def webappDir = "$projectDir/frontend"


//nodeProjects
//':'office_backend'
//':frontend'
configure(':frontend') {
    apply plugin: 'com.moowork.node'

//    task nodeModuleInstall {
//        doLast {
//            nodeSetup.execute() // node를 설치
//            npmSetup.execute() // node를 설치
//            nodeInstallProduction.execute() // package.json에 추가된 의존 모듈을 설치(yarn install)
//        }
//    }
}


project(':'office_backend') {

    bootJar {
        enabled = false
    }

    // 메인 프로젝트 설정. 실제 bootrun 되는 곳
    jar{
        enabled = true
        manifest {
            attributes  'Title': 'office_backend', 'Version': 1.0, 'Main-Class': 'com.example.springcloudproduct.BackendApplicationApplication'
        }
        //archiveName 'SCMBackOffice.jar'
        //baseName = 'office_backend'
        //dependsOn configurations.runtime

        //from {
        //    configurations.compile.collect {it.isDirectory()? it: zipTree(it)}
        //}
        from { (configurations.runtime).collect { it.isDirectory() ? it : zipTree(it) } } {
            exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
        }
    }


    task nodeInstallProduction(type: NodeTask) {
        //script = file('front/src/js/index.js')
        script = file('front/package.js')
        //args = ['install']
    }

    node {
        // Version of node to use.
        version = '14.17.1'

        // Version of npm to use.
        npmVersion = '6.14.13'

        // Version of Yarn to use.
        //yarnVersion = '0.16.1'
        // Base URL for fetching node distributions (change if you have a mirror).
        distBaseUrl = 'https://nodejs.org/dist'

        // 이 값이 true이면 node,npm,yarn을 직접 명시된 버전으로 다운로드, 그렇지 않으면 이미 시스템에 설치된 버전을 사용한다.
        download = true

        // Set the work directory for unpacking node
        workDir = file("${project.rootDir}/nodejs")

        // Set the work directory for NPM
        // npmWorkDir = file("${project.buildDir}/npm")
        npmWorkDir = file("${project.rootDir}/npm")

        // Set the work directory where node_modules should be located
        //nodeModulesDir = file("${project.rootDir}/node")
    }

    node {
        //nodeModulesDir = file("${rootDir}/frontend/")
        nodeModulesDir = file("${rootDir}/frontend/node_modules")
    }

    task myScript(type: NodeTask) {
        script = file("${rootDir}/front/src/index.js")
        //script = file('package.js')
    }

    task webpack(type: NpmTask, dependsOn: npmInstall) {
        args = ['run', 'build']
    }

    task copyDistToStatic(type: Copy) {
        // 빌드된 프론트엔드의 파일 위치
        from("${rootDir}/frontend/dist/")
        // 백엔드 API 서버의 static 리소스로 복사할 위치
        //into("${project.projectDir}/src/main/resources/static/")
        into("${project.projectDir}/build/resources/static/")
        includeEmptyDirs = true
    }


    // gralde 빌드시 사용하는 task 프론트엔드 빌드와 복사까지 전과정을 수행한다
    // nodejs 설치 -> yarn 설치 -> node_modules 다운로드 -> front-end source 빌드 -> resource/static 복사
    // ./gradlew ~~~~~~~:frontEndBuild <= 빌드시 task 명을 포함시켜 빌드
    task frontEndBuild {
        doLast {
            nodeModuleInstall.execute()
            webpack.execute()
            copyDistToStatic.execute()
//            task webpackStart(type: NpmTask, dependsOn: copyDistToStatic) {
//                args = ['run', 'serve']
//            }
        }
    }
}


// front 설정
// https://yongary.tistory.com/354
// https://hanaweb.tistory.com/35   리액트
// https://kimchanjung.github.io/programming/2020/06/25/spring-gradle-build-with-front-end/ 이거 봐야함

//sourceSets {
//    main {
//        resources {
//            srcDirs = ["$webappDir/build", $projectDir+"/office_backend/src/main/resources"]
//        }
//    }
//}


