server:
  port: 8150
  servlet:
    encoding:
      force-response: true    # test mock 코드 한글 깨짐 처리

spring:
  profiles:
    active: dev
  #    include: ""
  #https://multifrontgarden.tistory.com/277
  # org.springframework.boot.context.config.InactiveConfigDataAccessException at InactiveConfigDataAccessException.java:126 검색 시 2.4+ spring boot yml 주입방식 알수 있음
  thymeleaf:
    prefix: classpath:/templates/
    check-template-location: false  # templates ????? ??? ??? ??? ??, ??? ??? ?????.
    suffix: .html
    mode: HTML5
    cache: false  # thymeleaf? ?? ??? ??? ???. cache=false ??(???? true)

  http:
    multipart:
      max-file-size: 50Mb   # 최대 파일 업로드 사이즈 추가
      max-request-size: -1

  # 데이터베이스 설정
  jpa:
#    show-sql: true # 실행된 쿼리 출력

    properties:
      hibernate:
        show_sql: true # 실행된 쿼리 출력. 결과값이 뿌려짐
        format_sql: true # 쿼리를 예쁘게 출력
#        use_sql_comments: true
#        jdbc.lob.non_contextual_creation: true
#        jdbc.diralect: org.hibernate.dialect.PostgreSQL95Dialect

    generate-ddl: false # 구현체와 상관없이 자동화된 ddl를 사용할 수 있게 설정

    hibernate:
      # ddl-auto 설정
      # none: 기본 값이며 아무 일도 일어나지 않는다.  ddl 쿼리를 사용하지 않음.
      # create: 데이터베이스를 drop 한 후, 데이터베이스를 새로 생성한다.
      # create-drop: SessionFactory가 시작될 때 스키마를 drop하고 재생성하며, SessionFactory가 종료될 때도 스키마를 drop 한다.
      # validate: 데이터베이스 스키마를 검증 한다. db스키마와 entity 간에 다른 점이 발생하면 오류를 발생시킴.
      # update: 데이터베이스 스키마를 갱신 한다. 실제 db스키마와 entity 간의 차이점을 비교해서 다른 부분만 update를 한다. 즉 drop을 하지 않는다.
      ddl-auto: none
      # https://gigas-blog.tistory.com/119 방언 설정 참조. 그런데 자동으로 적절한 방언이 선택됨.
#      dialect: org.hibernate.dialect.PostgreSQLDialect

#    open-in-view: true
#    database-platform: org.hibernate.dialect.PostgreSQL95Dialect
#    database: postgresql

  postgresqlconnection:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    # driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    username: postgres
    password: sinabeuro53
    url: jdbc:log4jdbc:postgresql://121.157.81.15:5432/project?currentSchema=ecomms
    jdbc-url: jdbc:log4jdbc:postgresql://121.157.81.15:5432/project?currentSchema=ecomms

    hikari:
      driver-class-name: ${spring.postgresqlconnection.driver-class-name}
      jdbc-url: ${spring.postgresqlconnection.url}
      username: ${spring.postgresqlconnection.username}
      password: ${spring.postgresqlconnection.password}
      connection-timeout: 10000
      minimum-idle: 2
      maximum-pool-size: 3
      max-lifetime: 3597000
      pool-name: ${spring.application.name}-${spring.profiles.active}-pool
      data-source-properties:
        cache-prep-stmts: "true"
        prep-stmt-cache-size: "250"
        prep-stmt-cache-sql-limit: "2048"
        use-server-prep-stmts: "true"
        use-local-session-state: "true"
        rewrite-batched-statements: "true"
        cache-result-set-metadata: "true"
        cache-server-configuration: "true"
        elide-set-auto-commits: "true"
        maintain-time-stats: "false"

mybatis:
  config-location: classpath:config/mybatis-config.xml
#  mapper-locations:
#    - mapper/*.xml
#    - mapper/**/*.xml






# https://goddaehee.tistory.com/206
# TRACE  <  DEBUG  <  INFO  <  WARN  <  ERROR
#logging:
#  config: classpath:logback-spring.xml
#  level:
#    ROOT: INFO
#    org.apache.http: DEBUG
#    httpclient.wire: DEBUG
#    Logger 설정에 resultset 부분에 additvity=false
#    https://freehoon.tistory.com/113
#    jdbc.sqlonly SQL 쿼리 문장만 로그로 남긴다. PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다.
    
#    jdbc.sqltiming SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다.
#    jdbc.audit ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.
#    jdbc.resultset ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다.
#    jdbc.resultsettable SQL 결과 조회된 데이터의 table을 로그로 남긴다.
  

# 업로드 경로  
upload:
  resource:
    location: file:/home/ec2-user/uploads/
  web:
    url:
    prefix: /uploads
  dirs:
    document: files
    images: images

management:
  endpoint:
    web:
      exposure:
        include: "*"

---
# spring 2.4+ 이후로 spring.profiles: ~~ 방식은 쓰지 않는다.
spring:
  config:
    activate:
      on-profile: local
server:
  port: 8150

#  jpa:
#    properties:
#      hibernate.show-sql: true
#      hibernate.format_sql: true
#      hibernate.use_sql_comments: true
#      hibernate.jdbc.lob.non_contextual_creation: true
#      hibernate.jdbc.diralect: org.hibernate.dialect.PostgreSQL95Dialect
#    hibernate:
#      # ddl-auto 설정
#      # none: 기본 값이며 아무 일도 일어나지 않는다.
#      # create: 데이터베이스를 drop 한 후, 데이터베이스를 새로 생성한다.
#      # create-drop: SessionFactory가 시작될 때 스키마를 drop하고 재생성하며, SessionFactory가 종료될 때도 스키마를 drop 한다.
#      # validate: 데이터베이스 스키마를 검증 한다.
#      # update: 데이터베이스 스키마를 갱신 한다.
#      ddl-auto: none
#    open-in-view: true
#    database-platform: org.hibernate.dialect.PostgreSQL95Dialect
#    database: postgresql